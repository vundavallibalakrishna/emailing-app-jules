# Email Configuration
sendgrid.api.key=YOUR_SENDGRID_API_KEY
elasticemail.api.key=YOUR_ELASTICEMAIL_API_KEY
mailchimp.api.key=YOUR_MAILCHIMP_API_KEY

# SMTP Configuration (for SmtpEmailSender)
# Ensure these are set if you intend to use the 'smtp' provider
spring.mail.host=your_smtp_host
spring.mail.port=587 # Or 465 for SSL, 25 for unencrypted
spring.mail.username=your_smtp_username
spring.mail.password=your_smtp_password
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true # Use true for TLS
# spring.mail.properties.mail.smtp.ssl.enable=true # Use true for SSL on port 465
# For debugging SMTP issues:
# spring.mail.properties.mail.debug=true

# JPA/Database Configuration
spring.datasource.url=jdbc:h2:mem:emailingappdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.hibernate.ddl-auto=update # Use 'update' for dev, 'validate' or 'none' for prod with migrations
spring.jpa.show-sql=true # Good for dev, disable in prod
spring.jpa.properties.hibernate.format_sql=true # Good for dev

# Quartz Job Store (default is in-memory, RAMJobStore)
# To use JDBC Job Store, uncomment and configure appropriately:
# spring.quartz.job-store-type=jdbc
# spring.quartz.jdbc.initialize-schema=never # if you manage schema manually or via JPA ddl-auto for quartz tables
# spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate # Or specific for your DB
# spring.quartz.properties.org.quartz.jobStore.tablePrefix=QRTZ_ # Default prefix for Quartz tables
# spring.quartz.properties.org.quartz.jobStore.isClustered=false # Set to true for clustered environments

# Spring Boot Actuator - to check health etc. (optional, but good practice)
management.endpoints.web.exposure.include=health,info,scheduledtasks,quartz # Expose quartz and scheduledtasks endpoints

# Default server port (optional, Spring Boot defaults to 8080)
# server.port=8080

# Webhook Configuration
sendgrid.webhook.verificationKey=YOUR_SENDGRID_WEBHOOK_VERIFICATION_KEY_BASE64_ENCODED_PUBLIC_KEY

# OAuth Token Encryption Key (MUST be a strong, randomly generated key, e.g., 32 bytes for AES-256)
# Generate a secure random key for this, e.g., using a password manager or `openssl rand -base64 32`
# IMPORTANT: Keep this key secret and secure. If it changes, previously encrypted tokens cannot be decrypted.
email.oauth.encryption.key=YOUR_SECURE_32_BYTE_ENCRYPTION_KEY_HERE

# Google OAuth2 Configuration (for Gmail)
google.oauth.clientId=YOUR_GOOGLE_CLIENT_ID
google.oauth.clientSecret=YOUR_GOOGLE_CLIENT_SECRET
google.oauth.redirectUri=http://localhost:8080/oauth2/callback/google # Or your deployed URI
# Scopes for Gmail: https://developers.google.com/gmail/api/auth/scopes
# For sending email: https://www.googleapis.com/auth/gmail.send
# For reading profile to get email address: https://www.googleapis.com/auth/userinfo.email openid
google.oauth.scopes=https://www.googleapis.com/auth/gmail.send,https://www.googleapis.com/auth/userinfo.email,openid

# Microsoft OAuth2 Configuration (for Outlook via Graph API)
microsoft.oauth.clientId=YOUR_MICROSOFT_CLIENT_ID
microsoft.oauth.clientSecret=YOUR_MICROSOFT_CLIENT_SECRET
microsoft.oauth.redirectUri=http://localhost:8080/oauth2/callback/microsoft # Or your deployed URI
# Scopes for Microsoft Graph: https://docs.microsoft.com/en-us/graph/permissions-reference
# For sending email: Mail.Send
# For reading user profile to get email address: User.Read
# For refresh tokens: offline_access
# openid and profile are standard OIDC scopes
microsoft.oauth.scopes=Mail.Send User.Read openid profile offline_access
microsoft.oauth.authority=https://login.microsoftonline.com/common/ # For multi-tenant apps; use tenantID for single-tenant
